version: "3.8"      # or "3" or whatever version you use

volumes:
  n8n_storage:
  postgres_storage:

networks:
  ocr-app:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['ocr-app']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - WEBHOOK_URL=${N8N_WEBHOOK_URL}
    - N8N_PROTOCOL=http
  env_file:
    - .env

services:
    postgres:
      image: postgres:16-alpine
      hostname: postgres
      networks: ['ocr-app']
      restart: unless-stopped
      env_file:
        - .env
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}
      volumes:
        - postgres_storage:/var/lib/postgresql/data
      healthcheck:
        test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
        interval: 5s
        timeout: 5s
        retries: 10
    n8n-import:
      <<: *service-n8n
      hostname: n8n-import
      entrypoint: /bin/sh
      command:
        - "-c"
        - "n8n import:workflow --separate --input=/data/workflows"
      volumes:
        - ./data:/data
      depends_on:
        postgres:
          condition: service_healthy

    n8n:
      <<: *service-n8n
      hostname: n8n
      restart: unless-stopped
      ports:
        - 5101:5678
      volumes:
        - n8n_storage:/home/node/.n8n
        - ./data:/data
      depends_on:
        postgres:
          condition: service_healthy
        n8n-import:
          condition: service_completed_successfully
    ocr-api:
      build:
        context: ./ocr-api  # <- adjust if your FastAPI OCR app lives in a different folder
      ports:
        - 5102:8000  # Local:Container port
      networks: ['ocr-app']
      volumes:
        - ./ocr-api/temp_ocr:/app/temp_ocr  # optional for temp image persistence
      restart: unless-stopped
    frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
      networks: ['ocr-app']
      ports:
        - 5103:3000                  # Change to your preferred local:container port
      env_file:
        - .env
      volumes:
        - ./frontend:/app     # Hot reload for dev if needed